{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { reviews } from '../data/reviews';\nexport const useReviews = () => {\n  _s();\n  const [reviewsList, setReviewsList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadReviews = async () => {\n      try {\n        setLoading(true);\n        // Имитация загрузки с API\n        await new Promise(resolve => setTimeout(resolve, 300));\n        setReviewsList(reviews);\n        setError(null);\n      } catch (err) {\n        setError('Ошибка загрузки отзывов');\n        console.error('Error loading reviews:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadReviews();\n  }, []);\n  const loadMoreReviews = async () => {\n    // Логика для загрузки дополнительных отзывов\n    // Пока что просто имитация\n    try {\n      setLoading(true);\n      await new Promise(resolve => setTimeout(resolve, 500));\n      // В реальном приложении здесь была бы загрузка следующей порции данных\n      setLoading(false);\n    } catch (err) {\n      setError('Ошибка загрузки дополнительных отзывов');\n      setLoading(false);\n    }\n  };\n  return {\n    reviews: reviewsList,\n    loading,\n    error,\n    loadMoreReviews\n  };\n};\n_s(useReviews, \"b+fnRev3XB5r8VACFXnXMOey3wM=\");","map":{"version":3,"names":["useState","useEffect","reviews","useReviews","_s","reviewsList","setReviewsList","loading","setLoading","error","setError","loadReviews","Promise","resolve","setTimeout","err","console","loadMoreReviews"],"sources":["/home/reqviem/workiWorki/site-reviews/src/hooks/useReviews.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { reviews } from '../data/reviews';\n\nexport const useReviews = () => {\n  const [reviewsList, setReviewsList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadReviews = async () => {\n      try {\n        setLoading(true);\n        // Имитация загрузки с API\n        await new Promise(resolve => setTimeout(resolve, 300));\n        setReviewsList(reviews);\n        setError(null);\n      } catch (err) {\n        setError('Ошибка загрузки отзывов');\n        console.error('Error loading reviews:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadReviews();\n  }, []);\n\n  const loadMoreReviews = async () => {\n    // Логика для загрузки дополнительных отзывов\n    // Пока что просто имитация\n    try {\n      setLoading(true);\n      await new Promise(resolve => setTimeout(resolve, 500));\n      // В реальном приложении здесь была бы загрузка следующей порции данных\n      setLoading(false);\n    } catch (err) {\n      setError('Ошибка загрузки дополнительных отзывов');\n      setLoading(false);\n    }\n  };\n\n  return {\n    reviews: reviewsList,\n    loading,\n    error,\n    loadMoreReviews\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChB;QACA,MAAM,IAAII,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;QACtDP,cAAc,CAACJ,OAAO,CAAC;QACvBQ,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOK,GAAG,EAAE;QACZL,QAAQ,CAAC,yBAAyB,CAAC;QACnCM,OAAO,CAACP,KAAK,CAAC,wBAAwB,EAAEM,GAAG,CAAC;MAC9C,CAAC,SAAS;QACRP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC;IACA;IACA,IAAI;MACFT,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM,IAAII,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD;MACAL,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZL,QAAQ,CAAC,wCAAwC,CAAC;MAClDF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IACLN,OAAO,EAAEG,WAAW;IACpBE,OAAO;IACPE,KAAK;IACLQ;EACF,CAAC;AACH,CAAC;AAACb,EAAA,CA5CWD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}