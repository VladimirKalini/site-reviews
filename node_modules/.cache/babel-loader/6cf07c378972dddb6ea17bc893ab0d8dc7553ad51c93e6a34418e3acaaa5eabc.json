{"ast":null,"code":"import{useState,useEffect}from'react';import{reviews}from'../data/reviews';export const useReviews=()=>{const[reviewsList,setReviewsList]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const loadReviews=async()=>{try{setLoading(true);// Имитация загрузки с API\nawait new Promise(resolve=>setTimeout(resolve,300));setReviewsList(reviews);setError(null);}catch(err){setError('Ошибка загрузки отзывов');console.error('Error loading reviews:',err);}finally{setLoading(false);}};loadReviews();},[]);const loadMoreReviews=async()=>{// Логика для загрузки дополнительных отзывов\n// Пока что просто имитация\ntry{setLoading(true);await new Promise(resolve=>setTimeout(resolve,500));// В реальном приложении здесь была бы загрузка следующей порции данных\nsetLoading(false);}catch(err){setError('Ошибка загрузки дополнительных отзывов');setLoading(false);}};return{reviews:reviewsList,loading,error,loadMoreReviews};};","map":{"version":3,"names":["useState","useEffect","reviews","useReviews","reviewsList","setReviewsList","loading","setLoading","error","setError","loadReviews","Promise","resolve","setTimeout","err","console","loadMoreReviews"],"sources":["/home/reqviem/workiWorki/site-reviews/src/hooks/useReviews.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { reviews } from '../data/reviews';\n\nexport const useReviews = () => {\n  const [reviewsList, setReviewsList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadReviews = async () => {\n      try {\n        setLoading(true);\n        // Имитация загрузки с API\n        await new Promise(resolve => setTimeout(resolve, 300));\n        setReviewsList(reviews);\n        setError(null);\n      } catch (err) {\n        setError('Ошибка загрузки отзывов');\n        console.error('Error loading reviews:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadReviews();\n  }, []);\n\n  const loadMoreReviews = async () => {\n    // Логика для загрузки дополнительных отзывов\n    // Пока что просто имитация\n    try {\n      setLoading(true);\n      await new Promise(resolve => setTimeout(resolve, 500));\n      // В реальном приложении здесь была бы загрузка следующей порции данных\n      setLoading(false);\n    } catch (err) {\n      setError('Ошибка загрузки дополнительных отзывов');\n      setLoading(false);\n    }\n  };\n\n  return {\n    reviews: reviewsList,\n    loading,\n    error,\n    loadMoreReviews\n  };\n};"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,OAAO,KAAQ,iBAAiB,CAEzC,MAAO,MAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGL,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACM,OAAO,CAAEC,UAAU,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACQ,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAExCC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAS,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACFH,UAAU,CAAC,IAAI,CAAC,CAChB;AACA,KAAM,IAAI,CAAAI,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CACtDP,cAAc,CAACH,OAAO,CAAC,CACvBO,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAE,MAAOK,GAAG,CAAE,CACZL,QAAQ,CAAC,yBAAyB,CAAC,CACnCM,OAAO,CAACP,KAAK,CAAC,wBAAwB,CAAEM,GAAG,CAAC,CAC9C,CAAC,OAAS,CACRP,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDG,WAAW,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAM,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC;AACA;AACA,GAAI,CACFT,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,IAAI,CAAAI,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CACtD;AACAL,UAAU,CAAC,KAAK,CAAC,CACnB,CAAE,MAAOO,GAAG,CAAE,CACZL,QAAQ,CAAC,wCAAwC,CAAC,CAClDF,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,MAAO,CACLL,OAAO,CAAEE,WAAW,CACpBE,OAAO,CACPE,KAAK,CACLQ,eACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}